### 加密过程原理
1. **关键字预处理与AES加密**
   - 首先对关键字进行扩充，目的是将其标准化为固定长度（48比特），以方便后续处理。对于包含中文和英文的关键字，考虑到字节表示差异，设定了一定规则来确保总长度符合要求。例如，一个关键字以分号结尾，中文在str转bytes后占3个字节，若有x个中文和y个英文，总字节数为3x + y + 1个字节，为达到48字节长度，对中文数量进行了限制（不超过15个），不足则零填充。然后使用CBC模式的AES加密算法对扩充后的关键字进行加密，得到密文X_i。CBC模式通过将前一个密文块与当前明文块进行异或操作后再加密，增加了密文的随机性和安全性，使得相同的明文在不同位置加密后结果不同。
2. **基于HMAC的密钥生成与处理**
   - 将X_i划分为左右两部分（L_i和R_i）后，利用HMAC - SHA256算法，以固定的保密密钥hashkey对L_i进行处理，得到新的密钥k_i。HMAC（Hash - based Message Authentication Code）是一种基于哈希函数的消息认证码，它结合了哈希函数的单向性和密钥的保密性，确保了只有知道hashkey的一方才能生成有效的k_i。这里使用HMAC - SHA256对L_i进行计算，生成的k_i长度为32个字符，用于后续的加密操作，增加了系统的安全性，因为即使攻击者获取了X_i，也难以得到正确的k_i来进行解密或伪造检索。
3. **伪随机序列生成与加密**
   - 使用伪随机函数Random，输入随机种子seed生成伪随机序列S_i。伪随机函数在密码学中用于引入随机性，使得加密过程具有不可预测性。然后以k_i为密钥，再次使用HMAC - SHA256对S_i进行加密得到FK_i。通过这种方式，将伪随机序列与密钥k_i相关联，进一步增加了数据的安全性和加密的复杂性，使得密文C_i不仅依赖于关键字本身，还与随机种子和密钥相关，防止了攻击者通过简单分析密文来获取关键字信息。
4. **生成最终密文**
   - 将S_i与FK_i拼接得到T_i，然后将T_i与X_i异或得到最后的密文C_i。异或操作在这里起到了混淆数据的作用，即使攻击者获取了C_i，由于不知道T_i和X_i的具体内容，也很难还原出原始关键字。同时，由于T_i的生成与随机种子seed、密钥k_i等相关，使得密文C_i具有高度的随机性和保密性，只有拥有正确密钥和随机种子的授权方才能进行解密操作，从而保护了关键字的安全性，并且为后续的检索和解密过程提供了基础。

### 检索过程原理
1. **客户端提供检索信息**
   - 客户端将查询关键词对应的X_i和k_i发送给服务器。这两个值是在加密过程中生成的，并且与关键词紧密相关，是进行检索的关键信息。X_i是原始关键字经过AES加密后的密文，k_i是基于X_i的一部分通过HMAC - SHA256生成的密钥，它们包含了关键词的特征信息，但在传输过程中以密文形式存在，保证了信息的安全性。
2. **服务器计算与验证**
   - 服务器收到X_i和k_i后，首先计算C_i和X_i异或得到T_i。这一步是基于加密过程中密文C_i与X_i、T_i之间的关系（C_i = T_i + X_i）进行逆运算，从而获取T_i。然后将T_i划分为T_iL和T_iR，以k_i为密钥，使用带密钥的hash函数H2对T_iL进行加密，将结果与T_iR比较。这里的原理是，在加密过程中，T_i的生成与X_i、k_i相关，通过对T_iL进行特定的加密操作并与T_iR比较，可以验证T_i是否是与给定的X_i和k_i相对应的合法密文。如果计算结果与T_iR相同，说明检索成功，即服务器找到了与客户端提供的关键词相关的密文数据，而服务器在整个过程中并不需要知道关键词的明文内容，保护了数据的隐私性。

### 解密过程原理
1. **伪随机序列重新生成**
   - 解密过程首先使用与加密过程相同的随机种子seed，通过伪随机函数Random重新生成伪随机序列S_i。这是因为在加密过程中，S_i参与了密文C_i的生成，并且与其他信息（如k_i、X_i等）相关联，通过重新生成S_i，可以利用其与加密过程中的关联性来逐步还原原始关键字。
2. **密文划分与计算还原L_i和R_i**
   - 将密文C_i划分为C_iL和C_iR后，S_iL和C_iL异或得到L_i，这是基于加密过程中C_i = T_i + X_i以及T_i = <S_i, FK_i>的关系进行逆运算。然后以hashkey为密钥，使用HMAC - SHA256对L_i进行加密得到k_i，这与加密过程中生成k_i的方式相同，确保了在解密过程中能够正确还原出用于后续计算的密钥。接着以k_i为密钥，使用HMAC - SHA256对S_i进行加密得到FK_i，同样与加密过程中的操作一致。最后FK_i与C_iR异或得到R_i，通过这一系列的计算，逐步还原出了X_i的左右两部分L_i和R_i。
3. **还原原始关键字**
   - 拼接L_i与R_i得到X_i，此时得到的X_i与加密前的关键字经过AES加密后的密文相同，最后使用AES解密算法对X_i进行解密，即可得到原始的关键字。整个解密过程是加密过程的逆运算，通过利用加密过程中生成的各种中间数据（如随机种子seed、密钥hashkey、k_i等）以及它们之间的数学关系，在保证数据安全性的前提下，成功还原出原始关键字，确保了只有拥有正确密钥和随机种子的授权用户能够获取原始数据，实现了数据的保密性和完整性。